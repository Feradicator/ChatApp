    import jwt from "jsonwebtoken";//This line imports the sign function from the jsonwebtoken library, which is used to create JSON Web Tokens (JWTs).
    import User from "../models/UserModel.js";
import { compare } from "bcrypt";
    const maxAge=3*24*60*60*1000//3 days json web token valid
    const createToken=(email,userId)=>{
        return jwt.sign({email,userId},process.env.JWT_KEY,{expiresIn:maxAge})

    }

    export const signup=async (request,response,next)=>
    {
        try{
            const {email,password}=request.body;
            if(!email || !password)
            {
                return response.status(400).send("Email or Password missing")
            }
            const user=await User.create({email,password});//When the promise is fulfilled, it returns an object representing the newly created user. 
                                                        //This object typically contains information such as the user's ID, email, and other relevant 
                                                        //attributes stored in the database.
            response.cookie("jwt",createToken(email,user.id),{//This sets a cookie named "jwt" in the client's browser, containing the JWT generated by createToken
                maxAge,//sets the lifetime of cookie
                secure:true,//ensures the cookie is only sent over HTTPS,
                sameSite:"None"// allows the cookie to be sent with cross-site requests.
            })
            return response.status(201).json({
                user:{
                    id:user.id,
                    email:user.email,
                    profileSetup:user.profileSetup  

            }})

        }
        catch(error){
            console.log({error});
            return response.status(500).send("Internal Error")

        }
    }
    export const login=async (request,response,next)=>
        {
            try{
                const {email,password}=request.body;
                if(!email || !password)
                {
                    return response.status(400).send("Email or Password missing")
                }
                const user=await User.findOne({email});
                if(!user)
                {
                    return response.status(404).send("User with the given email not found")

                }
                const auth=await compare(password,user.password);
                if(!auth)
                    return response.status(400).send("Password is incorrect")
                response.cookie("jwt",createToken(email,user.id),{//This sets a cookie named "jwt" in the client's browser, containing the JWT generated by createToken
                    maxAge,//sets the lifetime of cookie
                    secure:true,//ensures the cookie is only sent over HTTPS,
                    sameSite:"None"// allows the cookie to be sent with cross-site requests.
                })
                return response.status(201).json({
                    user:{
                        id:user.id,
                        email:user.email,
                        profileSetup:user.profileSetup ,
                        firstName:user.firstName,
                        lastName:user.lastName,
                        image:user.image,
                        color:user.color

    
                }})
    
            }
            catch(error){
                console.log({error});
                return response.status(500).send("Internal Error")
    
            }
        }